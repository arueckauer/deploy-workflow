name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - LATEST
      - STAGING
concurrency:
  group: ${{ github.ref }}

env:
  RELEASES_PATH: "~/arueckauer-deploy-workflow/"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
        environment: ${{ env.ENVIRONMENT }}
    steps:

      - name: Set Environment
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=testing" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/tags/STAGING" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/tags/LATEST" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "Unsupported event or branch/tag"
            exit 1
          fi

  generate-release-name:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      release_name: ${{ steps.generate.outputs.release_name }}
    steps:
      - name: Generate Release Name
        id: generate
        run: |
          COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          if [ -z "$COMMIT_HASH" ]; then
            VERSION_NAME="unknown"
          else
            RELEASE_UID=$((0x$COMMIT_HASH))
            IFS=',' read -r -a VERSION_NAMES <<< "${{ vars.VERSION_NAMES }}"
            VERSION_NAME=${VERSION_NAMES[$((RELEASE_UID % ${#VERSION_NAMES[@]}))]}
          fi
          TIMESTAMP=$(date +"%Y-%m-%d")
          RELEASE_NAME="$COMMIT_HASH-$TIMESTAMP ($VERSION_NAME)"
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

  checkout:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Tar repository
        run: |
          cd ..
          tar -czf repository.tar.gz -C deploy-workflow --exclude=".git" .
          mv repository.tar.gz deploy-workflow/
          cd deploy-workflow

      - name: Cache repository
        uses: actions/cache@v4
        with:
          path: repository.tar.gz
          key: ${{ runner.os }}-repository-${{ github.sha }}

  build:
    runs-on: ubuntu-latest
    needs: checkout
    steps:

      - name: Retrieve repository
        uses: actions/cache@v4
        with:
          path: repository.tar.gz
          key: ${{ runner.os }}-repository-${{ github.sha }}

      - name: Extract repository
        run: |
          pwd
          ls -lAh
          tar -xzf repository.tar.gz
          rm repository.tar.gz
          ls -lAh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: index.md
          path: index.md

  deploy:
    needs: [setup,generate-release-name, build]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
      RELEASE_NAME: ${{ needs.generate-release-name.outputs.release_name }}
    runs-on: ubuntu-latest
    steps:

      - name: Show environment
        run: |
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.ref: ${{ github.ref }}"
          echo "env.ENVIRONMENT: ${{ env.ENVIRONMENT }}"
          echo "env.RELEASE_NAME: ${{ env.RELEASE_NAME }}"

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: index.md
          path: .

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo -e "${{ secrets.SCP_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SCP_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.SCP_USERNAME }}@${{ secrets.SCP_HOST }} "echo 'SSH connection successful'" || exit 1
          echo "known hosts:"
          cat ~/.ssh/known_hosts

      - name: Deploy
        run: scp index.md ${{ secrets.SCP_USERNAME }}@${{ secrets.SCP_HOST }}:${{ env.RELEASES_PATH }}${{ vars.ENVIRONMENT }}
